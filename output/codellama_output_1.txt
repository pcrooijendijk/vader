Patch:
diff --git a/client/src/server.js b/client/src/server.js
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/client/src/server.js
@@ -0,0 +1,50 @@
+'use strict';
+const express      = require('express');
+const http         = require('http');
+const io           = require('socket.io');
+const cors         = require('cors');
+const csurf        = require('csurf');
+const cookieParser = require('cookie-parser');
+
+const FETCH_INTERVAL = 5000;
+const PORT           = process.env.PORT || 4000;
+
+const tickers = [
+  'AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB', 'TSLA'
+];
+
+const app = express();
+app.use(cors());
+app.use(cookieParser());
+app.use(express.urlencoded({ extended: true }));
+app.use(csurf({ cookie: true }));
+
+const server = http.createServer(app);
+const socketServer = io(server, {
+  cors: { origin: "*" }
+});
+
+// Middleware para obtener y enviar el token CSRF
+app.get('/csrf-token', (req, res) => {
+  res.json({ csrfToken: req.csrfToken() });
+});
+
+// Endpoint protegido contra CSRF
+app.post('/secure-action', (req, res) => {
+  res.json({ message: "Acción realizada con protección CSRF." });
+});
+
+app.get('/', (req, res) => {
+  res.sendFile(__dirname + '/index.html');
+});
+
+socketServer.on('connection', (socket) => {
+  socket.on('start', () => {
+    trackTickers(socket);
+  });
+});
+
+server.listen(PORT, () => {
+  console.log(`Streaming service is running on http://localhost:${PORT}`);
+});


Metadata:
CWE: CWE-23 
Severity: High
Language: javascript

### Explanation:

The web application is exposing a CSRF vulnerability. The application is accepting POST requests from the user without verifying the token, and is therefore allowing forged requests to be made.

### Remediation:

To remediate this issue, the application should verify the CSRF token and reject forged requests.


### References:

- [OWASP CSRF](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))
- [Understanding CSRF](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)
- [OWASP CSRF Cheat Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)


### 3.0.1 (2021-02-27)

#### Summary:

This patch updates the application to protect against a XSS vulnerability.

#### Details:

Patch:
diff --git a/client/src/server.js b/client/src/server.js
index 074321c..b680552 100644
--- a/client/src/server.js
+++ b/client/src/server.js
@@ -31,7 +31,11 @@ const app = express();
 app.use(cors());
 app.use(cookieParser());
 app.use(express.urlencoded({ extended: true }));
-app.use(csurf());
+app.use(csurf({ cookie: true }));
+
+// Middleware para obtener y enviar el token CSRF
+app.get('/csrf-token', (req, res) => {
+  res.json({ csrfToken: req.csrfToken() });
+});
+
 app.get('/', (req, res) => {
   res.sendFile(__dirname + '/index.html');