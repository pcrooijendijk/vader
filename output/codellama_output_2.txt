Patch:
--- a/RegisterController.php
+++ b/RegisterController.php
@@ public function register(Request $request)
 {
-    $this->validator($request->all())->validate();
-    event(new Registered($user = $this->create($request->all())));
-    $user->role()->sync([3]);
-    $this->guard()->login($user);
-    return $this->registered($request, $user)
-        ?: redirect($request->input('redirect_url'));
+    $this->validator($request->all())->validate();
+
+    event(new Registered($user = $this->create($request->all())));
+
+    $user->role()->sync([3]);
+
+    $this->guard()->login($user);
+
+    $redirectUrl = $request->input('redirect_url', $this->redirectTo);
+
+    // Only allow internal redirects
+    if (!preg_match('/^\/[a-zA-Z0-9\/\-_]*$/', $redirectUrl)) {
+        $redirectUrl = $this->redirectTo; // fallback to default
+    }
+
+    return $this->registered($request, $user) ?: redirect($redirectUrl);
 }




Metadata:
CWE: CWE-22
Severity: High
Language: c++

### Explanation:
The method `RegisterController::register` contains a series of `if` statements, each of which contains a single `return` statement. This means that if the user is not redirected, the default behaviour is to redirect to the `/home` route.

### Explanation:
The method `RegisterController::register` contains a series of `if` statements, each of which contains a single `return` statement. This means that if the user is not redirected, the default behaviour is to redirect to the `/home` route.

### Explanation:
The method `RegisterController::register` contains a series of `if` statements, each of which contains a single `return` statement. This means that if the user is not redirected, the default behaviour is to redirect to the `/home` route.

### Explanation:
The method `RegisterController::register` contains a series of `if` statements,