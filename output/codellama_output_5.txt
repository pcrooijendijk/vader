Patch:
diff --git a/saas/api/server/api/public.ts b/saas/api/server/api/public.ts
index b3a2d22..f4e123c 100644
--- a/saas/api/server/api/public.ts
+++ b/saas/api/server/api/public.ts
@@
 import * as express from 'express';
+import { body, validationResult } from 'express-validator';

 const router = express.Router();

 router.post(
-  '/get-user-by-slug',
-  async (req, res, next) => {
-    console.log('Express route: /get-user-by-slug');
-
-    try {
-      const { slug } = req.body;
-
-      const user = await User.getUserBySlug({ slug });
-
-      res.json({ user });
-    } catch (err) {
-      next(err);
-    }
-  }
+  '/get-user-by-slug',
+  [
+    body('slug')
+      .isString()
+      .isLength({ min: 1, max: 100 })
+      .matches(/^[a-zA-Z0-9-_]+$/)
+      .withMessage('Invalid slug format.'),
+  ],
+  async (req, res, next) => {
+    console.log('Express route: /get-user-by-slug');
+    const errors = validationResult(req);
+    if (!errors.isEmpty()) {
+      return res.status(400).json({ errors: errors.array() });
+    }
+    try {
+      const { slug } = req.body;
+      const user = await User.getUserBySlug({ slug });
+      res.json({ user });
+    } catch (err) {
+      next(err);
+    }
+  }
 );


Metadata:
CWE: CWE-829
Severity: Very Low
Language: python

### Explanation:

This code does not check if the string is an integer before converting it to int.

### Recommendation:

Add a check to ensure that the input is an integer before converting it to int.

### File: saas/api/server/api/private.ts

Patch:
diff --git a/saas/api/server/api/private.ts b/saas/api/server/api/private.ts
index 706094c..b135f0b 100644
--- a/saas/api/server/api/private.ts
+++ b/saas/api/server/api/private.ts
@@
 import * as express from 'express';
+import { body, validationResult } from 'express-validator';

 const router = express.Router();

 router.post(
-  '/add-comment',
-  async (req, res, next) => {
-    console.log('Express route: /add-comment');
-
-    try {
-      const { comment, storyId } = req.body;
-
-      const commentId = await Comment.addComment({ comment, storyId });
-
-      res.json({ commentId });
-    } catch (err) {
-      next(err);
-    }
-  }
+  '/add-comment',
+  [
+    body('comment')
+      .isString()
+      .isLength({ min: 1, max: 1000 })
+      .withMessage('Invalid comment format.'),
+    body('storyId')
+      .isString()
+      .isLength({ min: 1, max: 100 })
+      .matches(/^[a-zA-Z0-9-_]+$/)
+      .withMessage('Invalid story ID format.'),
+  ],
+  async (req, res, next) => {
+    console.log('Express route: /add-comment');
+    const errors = validationResult(req);
+    if (!errors.isEmpty()) {
+      return res.