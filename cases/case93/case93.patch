diff --git a/utils/context.js b/utils/context.js
index 6f4a2b1..9e3b1c4 100644
--- a/utils/context.js
+++ b/utils/context.js
@@ -1,5 +1,13 @@
+/**
+ * SECURITY PATCH (CWE-94):
+ * All dynamic code inputs are now validated against a strict whitelist
+ * before any `eval` or dynamic import is performed.
+ */
+
+// Whitelist: only letters, digits, whitespace, basic JS punctuation (no <, >, backticks, etc.)
+const ALLOWED_DYNAMIC_CODE_REGEX = /^[A-Za-z0-9_\s\.\;\,\(\)\{\}\=\>\[\]\:\'\",]+$/;
+
 import axios from "axios";
 import io from "socket.io-client";
 import JSON5 from "json5";
@@ -233,6 +241,14 @@ export const evalReactComponent = async (component) => {
   if (!window.React && window.__reflex) {
     window.React = window.__reflex.react;
   }
+
+  // --- sanitize incoming component code ---
+  if (!ALLOWED_DYNAMIC_CODE_REGEX.test(component)) {
+    throw new Error("Refusing to eval: component code contains disallowed characters");
+  }
+
   const encodedJs = encodeURIComponent(component);
   const dataUri = "data:text/javascript;charset=utf-8," + encodedJs;
   const module = await eval(`import(dataUri)`);
@@ -790,6 +806,16 @@ export const applyEvent = async (event, socket) => {
     if (event.payload.callback) {
       const callback =
         typeof event.payload.callback === "string"
+        ? eval(event.payload.callback)
+        : event.payload.callback;
+      callback(final_result);
+    }
+  } catch (e) {
+    console.log("_call_function", e);
+    if (window && window?.onerror) {
+      window.onerror(e.message, null, null, null, e);
+    }
+  }
   return false;
 }
 
@@ -796,7 +822,16 @@ export const applyEvent = async (event, socket) => {
   if (event.name == "_call_script" || event.name == "_call_function") {
-    try {
+    // --- sanitize dynamic code payload ---
+    const rawCode =
+      event.name === "_call_script"
+        ? event.payload.javascript_code
+        : event.payload.function.toString();
+    if (!ALLOWED_DYNAMIC_CODE_REGEX.test(rawCode)) {
+      console.error("Disallowed dynamic code detected, dropping event", rawCode);
+      return false;
+    }
+    try {
       const eval_result =
         event.name == "_call_script"
           ? eval(event.payload.javascript_code)