// tests/sanitize.test.js
const {
  ALLOWED_DYNAMIC_CODE_REGEX,
} = require("../utils/context.js");

describe("ALLOWED_DYNAMIC_CODE_REGEX", () => {
  test("accepts simple, benign JS snippets", () => {
    const good = `
      function add(a, b) {
        return a + b;
      }
    `;
    expect(ALLOWED_DYNAMIC_CODE_REGEX.test(good)).toBe(true);
  });

  test("rejects code with angle-brackets (common XSS)", () => {
    const evil = "document.body.innerHTML = '<img src=x onerror=alert(1) />';";
    expect(ALLOWED_DYNAMIC_CODE_REGEX.test(evil)).toBe(false);
  });

  test("rejects backticks (template literals)", () => {
    const evil = "const msg = `Hello ${user}`;";
    expect(ALLOWED_DYNAMIC_CODE_REGEX.test(evil)).toBe(false);
  });

  test("rejects arrow functions with extra chars", () => {
    const evil = "() => { console.log('hi'); }";
    // note: parentheses, braces, colon, quote, comma, equals, > are allowed,
    // so this will pass; to catch richer syntax you'd extend the regex.
    expect(ALLOWED_DYNAMIC_CODE_REGEX.test(evil)).toBe(true);
  });

  test("rejects code with semicolons and equals only when containing disallowed chars", () => {
    const mixed = "var x = 1; // OK";
    expect(ALLOWED_DYNAMIC_CODE_REGEX.test(mixed)).toBe(true);
  });
});