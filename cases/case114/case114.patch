--- a/controllers/review.js
+++ b/controllers/review.js
@@
 const Listing = require("../models/listing");
 const Review = require("../models/reviews");
+const { body, validationResult } = require('express-validator');

 module.exports.createReview = async (req, res) => {
-    try {
-        let listing = await Listing.findById(req.params.id);
-        
-        if (!listing) {
-            req.flash("error", "Listing not found.");
-            return res.redirect("/listings");
-        }
-
-        let newReview = new Review(req.body.review);
-        newReview.author = req.user._id;
-
-        listing.reviews.push(newReview);
-        await newReview.save();
-        await listing.save();
-
-        req.flash("success", "New review created!");
-        res.redirect(`/listings/${listing._id}`);    
-    } 
-    catch (err) {
-        console.error(err);
-        req.flash("error", "An error occurred. Please try again later.");
-        res.redirect("/listings");
-    }
+    try {
+        const errors = validationResult(req);
+        if (!errors.isEmpty()) {
+            req.flash("error", "Invalid review input.");
+            return res.redirect("back");
+        }
+        
+        const listing = await Listing.findById(req.params.id);
+        if (!listing) {
+            req.flash("error", "Listing not found.");
+            return res.redirect("/listings");
+        }
+        
+        const newReview = new Review(req.body.review);
+        newReview.author = req.user._id;
+
+        listing.reviews.push(newReview);
+        await newReview.save();
+        await listing.save();
+
+        req.flash("success", "New review created!");
+        res.redirect(`/listings/${listing._id}`);
+    } catch (err) {
+        console.error(err);
+        req.flash("error", "An error occurred. Please try again later.");
+        res.redirect("/listings");
+    }
 };

 
 module.exports.destroyReview = async(req,res)=>{
-    let { id, reviewId } = req.params;
-    
-    await Listing.findByIdAndUpdate(id,{ $pull: {
-        reviews: reviewId
-    }});
-    
-    await Review.findByIdAndDelete(reviewId);
-    req.flash("success","Review deleted!");
-
-    res.redirect(`/listings/${id}`);
+    try {
+        const { id, reviewId } = req.params;
+        
+        const review = await Review.findById(reviewId);
+        if (!review) {
+            req.flash("error", "Review not found.");
+            return res.redirect(`/listings/${id}`);
+        }
+
+        if (!review.author.equals(req.user._id)) {
+            req.flash("error", "You are not authorized to delete this review.");
+            return res.redirect(`/listings/${id}`);
+        }
+
+        await Listing.findByIdAndUpdate(id, { $pull: { reviews: reviewId } });
+        await Review.findByIdAndDelete(reviewId);
+
+        req.flash("success", "Review deleted!");
+        res.redirect(`/listings/${id}`);
+    } catch (err) {
+        console.error(err);
+        req.flash("error", "An error occurred. Please try again later.");
+        res.redirect("/listings");
+    }
 };
+
+// Add this function in your router validation middleware:
+module.exports.validateReview = [
+    body('review.body')
+        .trim()
+        .notEmpty().withMessage('Review body must not be empty.')
+        .escape()
+];
