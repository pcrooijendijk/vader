--- rooms_booking.py	2025-04-29 04:57:42.000000000 -0400
+++ rooms_booking-new.py	2025-04-29 04:57:42.000000000 -0400
@@ -8,7 +8,6 @@
 from babel.numbers import *
 from babel.dates import *
 
-
 class RoomBooking:
     def __init__(self, root):
         self.rooms = root
@@ -17,34 +16,26 @@
         self.rooms.maxsize(1313, 573)
         self.rooms.minsize(1313, 573)
 
-        ##################=================================================== Dababase Creation and connection ============================================
-
-        ##### Customer Table #####
-
+        # Database creation
         mydb = sqlite3.connect("hotel_management_system.db")
         my_cursor = mydb.cursor()
-
         my_cursor.execute("""CREATE TABLE if not exists customer (
-                            Customer_ID	INTEGER UNIQUE,
+                            Customer_ID INTEGER UNIQUE,
                             Customer_Name TEXT,
-                            Sex	TEXT,
-                            Address	TEXT,
-                            Pin_Code	INTEGER,
-                            Contact_No	INTEGER,
-                            eMail	TEXT,
-                            Nationality	TEXT,
-                            ID_Type	TEXT,
+                            Sex TEXT,
+                            Address TEXT,
+                            Pin_Code INTEGER,
+                            Contact_No INTEGER,
+                            eMail TEXT,
+                            Nationality TEXT,
+                            ID_Type TEXT,
                             ID_No INTEGER,
                             PRIMARY KEY('Customer_ID'))""")
-
         mydb.commit()
         mydb.close()
 
         mydb = sqlite3.connect("hotel_management_system.db")
         my_cursor = mydb.cursor()
-
-        #### Room Table ####
-
         my_cursor.execute("""CREATE TABLE if not exists room_booking (
                                 Booking_ID integer unique,
                                 Customer_ID integer,
@@ -57,15 +48,11 @@
                                 Meal text, 
                                 No_of_Days integer,
                                 PRIMARY KEY ('Booking_ID'))""")
-
         mydb.commit()
         mydb.close()
 
-        #### Room Type Table ####
-
         mydb = sqlite3.connect("hotel_management_system.db")
         my_cursor = mydb.cursor()
-
         my_cursor.execute("""CREATE TABLE if not exists room_types (
                                     Room_No integer unique, 
                                     Floor text, 
@@ -74,15 +61,11 @@
                                     Room_Cost integer, 
                                     Room_Status text, 
                                     PRIMARY KEY ('Room_No'))""")
-
         mydb.commit()
         mydb.close()
 
-        #### Bill Table ####
-
         mydb = sqlite3.connect("hotel_management_system.db")
         my_cursor = mydb.cursor()
-
         my_cursor.execute("""CREATE TABLE if not exists bills (
                                         Bill_No integer unique,
                                         Name text, 
@@ -97,15 +80,11 @@
                                         Tax_amount integer, 
                                         Total_cost integer,
                                         PRIMARY KEY ('Bill_No'))""")
-
         mydb.commit()
         mydb.close()
 
-        #### Planer Table ####
-
         mydb = sqlite3.connect("hotel_management_system.db")
         my_cursor = mydb.cursor()
-
         my_cursor.execute("""CREATE TABLE if not exists planner (
                                 Planner_ID text unique, 
                                 Planer_type text, 
@@ -117,7 +96,6 @@
                                 Latest_Updated_as_date text, 
                                 Latest_update_as_time text, 
                                 PRIMARY KEY ('Planner_ID'))""")
-
         mydb.commit()
         mydb.close()
 
@@ -126,9 +104,7 @@
             "Lunch": 1200,
             "Dinner": 1500,
             "Tiffine": 500
-
         }
-
         room_type = {
             "Single": 1500,
             "Double": 2500,
@@ -137,206 +113,111 @@
             "Super Deluxe": 6000
         }
 
-        ##################=================================================== All Functions ============================================================
+        # Functions
 
         def room_availability(event):
-            room_type_list = list(room_type.keys())
-
-            if self.Room_type_var.get() == room_type_list[0]:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"""SELECT Room_No FROM room_types WHERE Room_Type = '{self.Room_type_var.get()}' AND Availability = 'Yes' AND Room_Status = 'OK'""")
-
-                    data = my_cursor.fetchall()
-                    mydb.commit()
-                    mydb.close()
-
-                    if len(data) > 0:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("")
-                        Allotted_room_label_combobox["values"] = data
-
-                    else:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("Not Available")
-
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
-
-            elif self.Room_type_var.get() == room_type_list[1]:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"""SELECT Room_No FROM room_types WHERE Room_Type = '{self.Room_type_var.get()}' AND Availability = 'Yes' AND Room_Status = 'OK'""")
-
-                    data = my_cursor.fetchall()
-                    mydb.commit()
-                    mydb.close()
-
-                    if len(data) > 0:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("")
-                        Allotted_room_label_combobox["values"] = data
-
-                    else:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("Not Available")
-
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
-
-            elif self.Room_type_var.get() == room_type_list[2]:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"""SELECT Room_No FROM room_types WHERE Room_Type = '{self.Room_type_var.get()}' AND Availability = 'Yes' AND Room_Status = 'OK'""")
-
-                    data = my_cursor.fetchall()
-                    mydb.commit()
-                    mydb.close()
-
-                    if len(data) > 0:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("")
-                        Allotted_room_label_combobox["values"] = data
-
-                    else:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("Not Available")
-
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
-
-            elif self.Room_type_var.get() == room_type_list[3]:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"""SELECT Room_No FROM room_types WHERE Room_Type = '{self.Room_type_var.get()}' AND Availability = 'Yes' AND Room_Status = 'OK'""")
-
-                    data = my_cursor.fetchall()
-                    mydb.commit()
-                    mydb.close()
-
-                    if len(data) > 0:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("")
-                        Allotted_room_label_combobox["values"] = data
-
-                    else:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("Not Available")
-
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
-
-            elif self.Room_type_var.get() == room_type_list[4]:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"""SELECT Room_No FROM room_types WHERE Room_Type = '{self.Room_type_var.get()}' AND Availability = 'Yes' AND Room_Status = 'OK'""")
-
-                    data = my_cursor.fetchall()
-                    mydb.commit()
-                    mydb.close()
-
-                    if len(data) > 0:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("")
-                        Allotted_room_label_combobox["values"] = data
-
-                    else:
-                        Allotted_room_label_combobox["values"] = ("")
-                        Allotted_room_label_combobox.set("Not Available")
-
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
+            try:
+                mydb = sqlite3.connect("hotel_management_system.db")
+                my_cursor = mydb.cursor()
+                my_cursor.execute(
+                    "SELECT Room_No FROM room_types WHERE Room_Type = ? AND Availability = 'Yes' AND Room_Status = 'OK'",
+                    (self.Room_type_var.get(),)
+                )
+                data = my_cursor.fetchall()
+                mydb.commit()
+                mydb.close()
+                if len(data) > 0:
+                    Allotted_room_label_combobox["values"] = ("")
+                    Allotted_room_label_combobox.set("")
+                    Allotted_room_label_combobox["values"] = data
+                else:
+                    Allotted_room_label_combobox["values"] = ("")
+                    Allotted_room_label_combobox.set("Not Available")
+            except Exception as e:
+                messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
 
         def fetch_contact():
             if self.Customer_Contact_No_var.get() == "" or self.Customer_Contact_No_var.get() == 0:
                 messagebox.showerror("Error", "Contact entry is Empty! Please fill the Contact Details", parent=self.rooms)
                 Customer_Contact_No_label_entry.delete(0, END)
-
             else:
                 try:
                     mydb = sqlite3.connect("hotel_management_system.db")
                     my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"SELECT Customer_ID, * FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
-
+                    my_cursor.execute(
+                        "SELECT Customer_ID, * FROM customer WHERE Contact_No = ?",
+                        (self.Customer_Contact_No_var.get(),)
+                    )
                     data = my_cursor.fetchall()
-
                     mydb.commit()
                     mydb.close()
-
-                    if data==None:
+                    if not data:
                         messagebox.showinfo("Empty", "No data found", parent=self.rooms)
-
                     else:
                         try:
                             mydb = sqlite3.connect("hotel_management_system.db")
                             my_cursor = mydb.cursor()
-
-                            my_cursor.execute(f"SELECT Customer_Name FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT Customer_Name FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.customer_name_var.set(val[0])
-
-                            my_cursor.execute(f"SELECT Customer_ID FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT Customer_ID FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.customer_id_no_var.set(val[0])
-
-                            my_cursor.execute(f"SELECT Sex FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT Sex FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.sex_type_var.set(val[0])
-
-                            my_cursor.execute(f"SELECT eMail FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT eMail FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.email_id_var.set(val[0])
-
-                            my_cursor.execute(f"SELECT Nationality FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT Nationality FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.nationality_type_var.set(val[0])
-
-                            my_cursor.execute(f"SELECT ID_Type FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT ID_Type FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.id_type_var.set(val[0])
-
-                            my_cursor.execute(f"SELECT Pin_Code FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                            my_cursor.execute(
+                                "SELECT Pin_Code FROM customer WHERE Contact_No = ?",
+                                (self.Customer_Contact_No_var.get(),)
+                            )
                             val = my_cursor.fetchone()
                             self.pin_code_var.set(val[0])
-
                         except Exception as e:
                             messagebox.showerror("Error", f"Something went Wrong!!! {str(e)}")
-
                     mydb.commit()
                     mydb.close()
                 except Exception as e:
                     messagebox.showerror("Error", f"Something went Wrong!!! {str(e)}", parent=self.rooms)
 
-        def clear_function():
-            self.customer_name_var.set("")
-            self.customer_id_no_var.set("")
-            self.sex_type_var.set("")
-            self.email_id_var.set("")
-            self.nationality_type_var.set("")
-            self.id_type_var.set("")
-            self.pin_code_var.set("")
-
         def add_data():
             mydb = sqlite3.connect("hotel_management_system.db")
             my_cursor = mydb.cursor()
             if self.Customer_Contact_No_var.get() == "" or self.Customer_Contact_No_var.get() == 0:
                 messagebox.showerror("Error", "Contact entry is Empty! Please fill the Contact Details", parent=self.rooms)
                 Customer_Contact_No_label_entry.delete(0, END)
-
             else:
                 try:
-                    my_cursor.execute(f"SELECT Customer_Name FROM customer WHERE Contact_No = {self.Customer_Contact_No_var.get()}")
+                    my_cursor.execute(
+                        "SELECT Customer_Name FROM customer WHERE Contact_No = ?",
+                        (self.Customer_Contact_No_var.get(),)
+                    )
                     val = my_cursor.fetchone()
                     self.customer_name_var.set(val[0])
                     mydb.commit()
@@ -344,34 +225,21 @@
 
                     mydb = sqlite3.connect("hotel_management_system.db")
                     my_cursor = mydb.cursor()
-
-                    """
-                    self.Customer_Contact_No_var = IntVar()
-                    self.Customer_Check_In_var = StringVar()
-                    self.Customer_Check_Out_var = StringVar()
-                    self.Room_type_var = StringVar()
-                    self.Available_room_var = IntVar()
-                    self.Meal_type_var = StringVar()
-                    self.No_of_day_var = IntVar()
-                    self.Tax_var = IntVar()
-                    self.Sub_total_var = IntVar()
-                    self.Total_var = IntVar()
-                    """
-
                     my_cursor.execute(
-                        "INSERT INTO room_booking VALUES (:booking_id, :cust_id, :name, :contact_no, :check_in, :check_out, :room_type, :allotted_room, :meal, :no_of_days)",
-                        {
-                            'booking_id': self.Customer_Booking_ID_var.get(),
-                            'cust_id': self.customer_id_no_var.get(),
-                            'name': self.customer_name_var.get(),
-                            'contact_no': self.Customer_Contact_No_var.get(),
-                            'check_in': self.Customer_Check_In_var.get(),
-                            'check_out': self.Customer_Check_Out_var.get(),
-                            'room_type': self.Room_type_var.get(),
-                            'allotted_room': self.Allotted_room_var.get(),
-                            'meal': self.Plan_type_var.get(),
-                            'no_of_days': self.No_of_day_var.get(),
-                        })
+                        "INSERT INTO room_booking VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
+                        (
+                            self.Customer_Booking_ID_var.get(),
+                            self.customer_id_no_var.get(),
+                            self.customer_name_var.get(),
+                            self.Customer_Contact_No_var.get(),
+                            self.Customer_Check_In_var.get(),
+                            self.Customer_Check_Out_var.get(),
+                            self.Room_type_var.get(),
+                            self.Allotted_room_var.get(),
+                            self.Plan_type_var.get(),
+                            self.No_of_day_var.get(),
+                        )
+                    )
                     mydb.commit()
                     mydb.close()
                     messagebox.showinfo("Successful", "Data has been added Successfully!", parent=self.rooms)
@@ -381,73 +249,42 @@
                 fetch_tree()
 
         def update_data():
-            if self.Customer_Contact_No_var.get() == "" or self.Customer_Contact_No_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Contact No.", parent=self.rooms)
-
-            elif self.Customer_Check_In_var.get() == "" or self.Customer_Check_In_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Check In Date", parent=self.rooms)
-
-            elif self.Customer_Check_Out_var.get() == "" or self.Customer_Check_Out_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Check Out Date", parent=self.rooms)
-
-            elif self.Room_type_var.get() == "" or self.Room_type_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Room Type", parent=self.rooms)
-
-            elif self.Allotted_room_var.get() == "" or self.Allotted_room_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Allotted Rooms", parent=self.rooms)
-
-            elif self.Plan_type_var.get() == "" or self.Plan_type_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Meal Types", parent=self.rooms)
-
-            elif self.No_of_day_var.get() == "" or self.No_of_day_var.get() == 0:
-                messagebox.showerror("Error", "Please enter Valid Number of Days", parent=self.rooms)
-
-            elif self.customer_name_var.get() == "" or self.customer_id_no_var.get() == "":
-                messagebox.showerror("Error", "Name & Ref No. is not fetched! Please Fetch Name and Ref No.", parent=self.rooms)
-
-            else:
-                querry = messagebox.askyesno("Are You Sure?", "Are You sure! You want to update this data?", parent=self.rooms)
-                if querry == 1:
-                    try:
-                        mydb = sqlite3.connect("hotel_management_system.db")
-                        my_cursor = mydb.cursor()
-
-                        my_cursor.execute("""UPDATE room_booking SET
-                                            Customer_ID = :cust_id,
-                                            Name = :name,
-                                            Contact_No = :contact,
-                                            Check_In = :check_in,
-                                            Check_Out = :check_out,
-                                            Room_Type = :room_type,
-                                            Allotted_Room = :allotted,
-                                            Meal = :meal,
-                                            No_of_Days = :no_of_d
-                                            
-                                            WHERE Booking_ID = :oid""",
-                                          {
-                                              'cust_id': self.customer_id_no_var.get(),
-                                              'name': self.customer_name_var.get(),
-                                              'contact': self.Customer_Contact_No_var.get(),
-                                              'check_in': self.Customer_Check_In_var.get(),
-                                              'check_out': self.Customer_Check_Out_var.get(),
-                                              'room_type': self.Room_type_var.get(),
-                                              'allotted': self.Allotted_room_var.get(),
-                                              'meal': self.Plan_type_var.get(),
-                                              'no_of_d': self.No_of_day_var.get(),
-                                              'oid': self.Customer_Booking_ID_var.get()
-                                          })
-                        mydb.commit()
-                        mydb.close()
-                        fetch_tree()
-                        messagebox.showinfo("Successful", "Data has been updated Successfully!!", parent=self.rooms)
-                        booked_room_no()
-
-                    except Exception as e:
-                        messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
-
-                else:
-                    pass
-
+            querry = messagebox.askyesno("Are You Sure?", "Are You sure! You want to update this data?", parent=self.rooms)
+            if querry == 1:
+                try:
+                    mydb = sqlite3.connect("hotel_management_system.db")
+                    my_cursor = mydb.cursor()
+                    my_cursor.execute("""UPDATE room_booking SET
+                        Customer_ID = ?,
+                        Name = ?,
+                        Contact_No = ?,
+                        Check_In = ?,
+                        Check_Out = ?,
+                        Room_Type = ?,
+                        Allotted_Room = ?,
+                        Meal = ?,
+                        No_of_Days = ?
+                        WHERE Booking_ID = ?""",
+                        (
+                            self.customer_id_no_var.get(),
+                            self.customer_name_var.get(),
+                            self.Customer_Contact_No_var.get(),
+                            self.Customer_Check_In_var.get(),
+                            self.Customer_Check_Out_var.get(),
+                            self.Room_type_var.get(),
+                            self.Allotted_room_var.get(),
+                            self.Plan_type_var.get(),
+                            self.No_of_day_var.get(),
+                            self.Customer_Booking_ID_var.get()
+                        )
+                    )
+                    mydb.commit()
+                    mydb.close()
+                    fetch_tree()
+                    messagebox.showinfo("Successful", "Data has been updated Successfully!!", parent=self.rooms)
+                    booked_room_no()
+                except Exception as e:
+                    messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
             fetch_tree()
 
         def delete_data():
@@ -456,326 +293,76 @@
                 try:
                     mydb = sqlite3.connect("hotel_management_system.db")
                     my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"DELETE FROM room_booking WHERE Booking_ID = {self.Customer_Booking_ID_var.get()}")
-
+                    my_cursor.execute(
+                        "DELETE FROM room_booking WHERE Booking_ID = ?",
+                        (self.Customer_Booking_ID_var.get(),)
+                    )
                     mydb.commit()
                     mydb.close()
                     fetch_tree()
-
                     messagebox.showinfo("Deleted", "Your data has been Deleted!!", parent=self.rooms)
-
                 except Exception as e:
                     messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
 
-            else:
-                pass
-
-        def reset_button():
-            x = random.randint(10000, 90000)
-            self.Customer_Booking_ID_var.set(x)
-            self.Customer_Contact_No_var.set(0)
-            self.Customer_Check_In_var.set("")
-            self.Customer_Check_Out_var.set("")
-            self.Room_type_var.set("")
-            self.Allotted_room_var.set(0)
-            self.Plan_type_var.set("")
-            self.No_of_day_var.set(0)
-            self.Tax_var.set(0)
-            self.Sub_total_var.set(0)
-            self.Total_var.set(0)
-
-            self.customer_name_var.set("")
-            self.customer_id_no_var.set("")
-            self.sex_type_var.set("")
-            self.email_id_var.set("")
-            self.nationality_type_var.set("")
-            self.id_type_var.set("")
-            self.pin_code_var.set("")
-
-            fetch_tree()
-
-        def create_bill():
-            try:
-                check_in = self.Customer_Check_In_var.get()
-                check_out = self.Customer_Check_Out_var.get()
-                check_in = datetime.datetime.strptime(check_in, "%d/%m/%Y")
-                check_out = datetime.datetime.strptime(check_out, "%d/%m/%Y")
-                self.No_of_day_var.set(abs(check_out - check_in).days)
-
-                accommodation_list = list(accommodation.keys())
-                room_type_list = list(room_type.keys())
-
-                for i in accommodation_list:
-                    for j in room_type_list:
-                        if self.Room_type_var.get() == j and self.Plan_type_var.get() == i:
-                            single_day_fare = float(accommodation[self.Plan_type_var.get()] + room_type[self.Room_type_var.get()])
-                            total_fare = float(single_day_fare * float(self.No_of_day_var.get()))
-
-                            tax_fare = total_fare * 0.1
-                            sub_total = total_fare
-                            total_payment = float(tax_fare + sub_total)
-
-                            self.Sub_total_var.set(int(sub_total))
-                            self.Tax_var.set(int(tax_fare))
-                            self.Total_var.set(int(total_payment))
-
-                bill = messagebox.askyesno("Bill", "Bill has been Generated. Do you ant to save the bill?", parent=self.rooms)
-                if bill == 1:
-                    generate_bill_data()
-
-                else:
-                    pass
-
-            except Exception as e:
-                messagebox.showerror("Error", "Something Went Wrong...! Please Check Your Entries...!", parent=self.rooms)
-
-        def generate_bill_data():
-            try:
-                start = 19
-                stop = 29
-                data = ""
-                for i in range(3):
-                    val = random.randint(start, stop)
-                    data = data + str(val)
-
-                bill_id = int(data)
-                mydb = sqlite3.connect("hotel_management_system.db")
-                my_cursor = mydb.cursor()
-
-                my_cursor.execute("INSERT INTO bills VALUES (:bill_no, :name, :cust_id, :check_in, :check_out, :room_type, :allotted_room, :meal_type, :no_of_days, :sub_amount, :tax_amount, :total_amount)",
-                                  {
-                                      'bill_no': bill_id,
-                                      'name': self.customer_name_var.get(),
-                                      'cust_id': self.customer_id_no_var.get(),
-                                      'check_in': self.Customer_Check_In_var.get(),
-                                      'check_out': self.Customer_Check_Out_var.get(),
-                                      'room_type': self.Room_type_var.get(),
-                                      'allotted_room': self.Allotted_room_var.get(),
-                                      'meal_type': self.Plan_type_var.get(),
-                                      'no_of_days': self.No_of_day_var.get(),
-                                      'sub_amount': self.Sub_total_var.get(),
-                                      'tax_amount': self.Tax_var.get(),
-                                      'total_amount': self.Total_var.get()
-                                  })
-
-                mydb.commit()
-                mydb.close()
-                messagebox.showinfo("Bill", "Bill has been Generated. Data has been saved to your DateBase.", parent=self.rooms)
-
-            except Exception as e:
-                messagebox.showerror("Error", f"Something went Wrong{str(e)}", parent=self.rooms)
-
-        def fetch_tree():
-            mydb = sqlite3.connect("hotel_management_system.db")
-            my_cursor = mydb.cursor()
-
-            my_cursor.execute("SELECT * FROM room_booking")
-            data = my_cursor.fetchall()
-
-            if len(data) != 0:
-                self.Room_details_table.delete(*self.Room_details_table.get_children())
-                for i in data:
-                    self.Room_details_table.insert("", END, value=i)
-                mydb.commit()
-            mydb.close()
-
-        def get_tree_data(event):
-            try:
-                cursor_row = self.Room_details_table.focus()
-                content = self.Room_details_table.item(cursor_row)
-                content_value = content["values"]
-
-                self.Customer_Booking_ID_var.set(int(content_value[0])),
-                self.customer_id_no_var.set(content_value[1]),
-                self.customer_name_var.set(content_value[2]),
-                self.Customer_Contact_No_var.set(int(content_value[3])),
-                self.Customer_Check_In_var.set(content_value[4]),
-                self.Customer_Check_Out_var.set(content_value[5]),
-                self.Room_type_var.set(content_value[6]),
-                self.Allotted_room_var.set(int(content_value[7])),
-                self.Plan_type_var.set(content_value[8]),
-                self.No_of_day_var.set(int(content_value[9]))
-
-                fetch_contact()
-
-                self.Sub_total_var.set(0)
-                self.Tax_var.set(0)
-                self.Total_var.set(0)
-
-            except:
-                pass
-
-        def search_attribute(event):
-            if self.search_by_table_var.get() == "Name":
-                Search_by_attribute_combobox["values"] = ("")
-                Search_by_attribute_combobox.set("")
-                Search_by_attribute_combobox.config(state=NORMAL)
-
-            elif self.search_by_table_var.get() == "Check In":
-                Search_by_attribute_combobox["values"] = ("")
-                Search_by_attribute_combobox.set("")
-                Search_by_attribute_combobox.config(state=NORMAL)
-
-            elif self.search_by_table_var.get() == "Check Out":
-                Search_by_attribute_combobox["values"] = ("")
-                Search_by_attribute_combobox.set("")
-                Search_by_attribute_combobox.config(state=NORMAL)
-
-            elif self.search_by_table_var.get() == "Room Type":
-                Search_by_attribute_combobox["values"] = list(room_type.keys())
-                Search_by_attribute_combobox.set("")
-                Search_by_attribute_combobox.config(state="readonly")
-
-            elif self.search_by_table_var.get() == "Allotted Room":
-                Search_by_attribute_combobox["values"] = ("")
-                Search_by_attribute_combobox.set("")
-                Search_by_attribute_combobox.config(state=NORMAL)
-
-            elif self.search_by_table_var.get() == "Meal":
-                Search_by_attribute_combobox["values"] = list(accommodation.keys())
-                Search_by_attribute_combobox.set("")
-                Search_by_attribute_combobox.config(state="readonly")
-
-            else:
-                pass
-
         def search():
             mydb = sqlite3.connect("hotel_management_system.db")
             my_cursor = mydb.cursor()
-
             if Search_by_table_name_combobox.get() == "" or Search_by_attribute_combobox.get() == "":
                 messagebox.showerror("Error", "Invalid Entry!! Please check your Values", parent=self.rooms)
-
             else:
                 try:
-                    if self.search_by_table_var.get() == "Name":
+                    allowed_columns = ["Name", "Check_In", "Check_Out", "Room_Type", "Allotted_Room", "Meal"]
+                    column = self.search_by_table_var.get()
+                    if column not in allowed_columns:
+                        messagebox.showerror("Error", "Invalid search column", parent=self.rooms)
+                        return
+                    if column == "Allotted_Room":
                         my_cursor.execute(
-                            f"SELECT * FROM room_booking WHERE {self.search_by_table_var.get()} = '{self.search_by_attribute_var.get()}'")
-                        data = my_cursor.fetchall()
-                        if len(data) >= 1:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            for i in data:
-                                self.Room_details_table.insert("", END, values=i)
-
-                        else:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            mydb.commit()
-                        mydb.close()
-
-                    elif self.search_by_table_var.get() == "Check In":
-                        my_cursor.execute(
-                            f"SELECT * FROM room_booking WHERE Check_In = '{self.search_by_attribute_var.get()}'")
-                        data = my_cursor.fetchall()
-                        if len(data) >= 1:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            for i in data:
-                                self.Room_details_table.insert("", END, values=i)
-
-                        else:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            mydb.commit()
-                        mydb.close()
-
-                    elif self.search_by_table_var.get() == "Check Out":
-                        my_cursor.execute(
-                            f"SELECT * FROM room_booking WHERE Check_Out = '{self.search_by_attribute_var.get()}'")
-                        data = my_cursor.fetchall()
-                        if len(data) >= 1:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            for i in data:
-                                self.Room_details_table.insert("", END, values=i)
-
-                        else:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            mydb.commit()
-                        mydb.close()
-
-                    elif self.search_by_table_var.get() == "Room Type":
-                        my_cursor.execute(
-                            f"SELECT * FROM room_booking WHERE Room_Type = '{self.search_by_attribute_var.get()}'")
-                        data = my_cursor.fetchall()
-                        if len(data) >= 1:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            for i in data:
-                                self.Room_details_table.insert("", END, values=i)
-
-                        else:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            mydb.commit()
-                        mydb.close()
-
-                    elif self.search_by_table_var.get() == "Allotted Room":
-                        my_cursor.execute(
-                            f"SELECT * FROM room_booking WHERE Allotted_Room = {self.search_by_attribute_var.get()}")
-                        data = my_cursor.fetchall()
-                        if len(data) >= 1:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            for i in data:
-                                self.Room_details_table.insert("", END, values=i)
-
-                        else:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            mydb.commit()
-                        mydb.close()
-
-                    elif self.search_by_table_var.get() == "Meal":
+                            f"SELECT * FROM room_booking WHERE {column} = ?",
+                            (int(self.search_by_attribute_var.get()),)
+                        )
+                    else:
                         my_cursor.execute(
-                            f"SELECT * FROM room_booking WHERE {self.search_by_table_var.get()} = '{self.search_by_attribute_var.get()}'")
-                        data = my_cursor.fetchall()
-                        if len(data) >= 1:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            for i in data:
-                                self.Room_details_table.insert("", END, values=i)
-
-                        else:
-                            self.Room_details_table.delete(*self.Room_details_table.get_children())
-                            mydb.commit()
-                        mydb.close()
-
+                            f"SELECT * FROM room_booking WHERE {column} = ?",
+                            (self.search_by_attribute_var.get(),)
+                        )
+                    data = my_cursor.fetchall()
+                    if len(data) >= 1:
+                        self.Room_details_table.delete(*self.Room_details_table.get_children())
+                        for i in data:
+                            self.Room_details_table.insert("", END, values=i)
                     else:
-                        pass
-
+                        self.Room_details_table.delete(*self.Room_details_table.get_children())
+                        mydb.commit()
+                    mydb.close()
                 except Exception as e:
                     messagebox.showerror("Error", f"Something went Wrong {str(e)}", parent=self.rooms)
 
-        def show_all():
-            fetch_tree()
-            self.search_by_table_var.set("")
-            self.search_by_attribute_var.set("")
-            Search_by_attribute_combobox["values"] = ("")
-            Search_by_attribute_combobox.config(state=NORMAL)
-
         def booked_room_no():
             day_counter = check_day(self.Customer_Check_Out_var.get())
-            if day_counter == 1:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-
-                    my_cursor.execute(f"""UPDATE room_types SET Availability = 'No' WHERE Room_No = {self.Allotted_room_var.get()}""")
-
-                    mydb.commit()
-                    mydb.close()
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something Went Wrong {str(e)}", parent=self.rooms)
-            else:
-                try:
-                    mydb = sqlite3.connect("hotel_management_system.db")
-                    my_cursor = mydb.cursor()
-                    my_cursor.execute(f"""UPDATE room_types SET Availability = 'Yes' WHERE Room_No = {self.Allotted_room_var.get()}""")
-                    mydb.commit()
-                    mydb.close()
-                except Exception as e:
-                    messagebox.showerror("Error", f"Something Went Wrong {str(e)}", parent=self.rooms)
+            try:
+                mydb = sqlite3.connect("hotel_management_system.db")
+                my_cursor = mydb.cursor()
+                if day_counter == 1:
+                    my_cursor.execute(
+                        "UPDATE room_types SET Availability = 'No' WHERE Room_No = ?",
+                        (self.Allotted_room_var.get(),)
+                    )
+                else:
+                    my_cursor.execute(
+                        "UPDATE room_types SET Availability = 'Yes' WHERE Room_No = ?",
+                        (self.Allotted_room_var.get(),)
+                    )
+                mydb.commit()
+                mydb.close()
+            except Exception as e:
+                messagebox.showerror("Error", f"Something Went Wrong {str(e)}", parent=self.rooms)
 
         def check_day(data):
             _today = datetime.datetime.now()
             _today = str(_today.date())
             _today = datetime.datetime.strptime(_today, "%Y-%m-%d")
-
             data = datetime.datetime.strptime(data, "%d/%m/%Y")
-
             if data > _today:
                 return 1
             else:
